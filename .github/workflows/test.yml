name: test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, rel/4-x]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DB_NAME: import_export
      IMPORT_EXPORT_POSTGRESQL_USER: postgres
      IMPORT_EXPORT_POSTGRESQL_PASSWORD: somepass
      IMPORT_EXPORT_MYSQL_USER: root
      IMPORT_EXPORT_MYSQL_PASSWORD: root
    strategy:
      fail-fast: true
      matrix:
        toxenv: [py312-django51, py312-django52, py312-django60, py312-djangomain]
        include:
          - toxenv: py312-djangomain
            mysql_image: mysql:8.4
            python-version: "3.12"
          - toxenv: py312-django60
            mysql_image: mysql:8.0
            python-version: "3.12"
          - toxenv: py312-django52
            mysql_image: mysql:8.0
            python-version: "3.12"
          - toxenv: py312-django51
            mysql_image: mysql:8.0
            python-version: "3.12"

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.IMPORT_EXPORT_POSTGRESQL_USER }}
          POSTGRES_PASSWORD: ${{ env.IMPORT_EXPORT_POSTGRESQL_PASSWORD }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        ports: ["5432:5432"]
        options: >-
          --health-cmd=pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      mysql:
        image: ${{ matrix.mysql_image }}
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.IMPORT_EXPORT_MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ env.DB_NAME }}
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -p${MYSQL_ROOT_PASSWORD} --silent"
          --health-interval=5s --health-timeout=2s --health-retries=20
        ports: ["3306:3306"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox coverage coveralls

      - name: Run ${{ matrix.toxenv }} (sqlite)
        run: tox -e ${{ matrix.toxenv }}
        env:
          IMPORT_EXPORT_TEST_TYPE: sqlite

      - name: Run ${{ matrix.toxenv }} (postgres)
        run: tox -e ${{ matrix.toxenv }}
        env:
          IMPORT_EXPORT_TEST_TYPE: postgres

      - name: Run ${{ matrix.toxenv }} (mysql)
        run: tox -e ${{ matrix.toxenv }}
        env:
          IMPORT_EXPORT_TEST_TYPE: mysql-innodb

      - name: Combine test coverage
        run: coverage combine

      - name: Upload coverage to coveralls.io
        run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.toxenv }}
          COVERALLS_PARALLEL: true

  coveralls:
    name: Indicate completion to coveralls.io
    needs: test
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
      - name: Finished
        run: |
          pip3 install --upgrade coveralls
          coveralls --service=github --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
