name: django-import-export CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      USERNAME: testuser
      PASSWD: ${{ secrets.TEST_PASSWD }}
    strategy:
      max-parallel: 4
      matrix:
        db: [ sqlite, postgres, mysql ]
        python-version: [ 3.6, 3.7, 3.8, 3.9, "3.10" ]
        django-version: [ 2.2, 3.0, 3.1, 3.2, 4.0, main ]
        include:
          - db: postgres
            db_port: 5432
          - db: mysql
            db_port: 3306
        exclude:
          - django-version: main
            python-version: 3.6
          - django-version: main
            python-version: 3.7
          - django-version: 4.0
            python-version: 3.6
          - django-version: 4.0
            python-version: 3.7
          - django-version: 2.2
            python-version: "3.10"
          - django-version: 3.0
            python-version: "3.10"
          - django-version: 3.1
            python-version: "3.10"
          - django-version: 3.2
            python-version: "3.10"
    services:
      mysql:
        image: mysql:8.0
        env:
          IMPORT_EXPORT_TEST_TYPE: mysql-innodb
          IMPORT_EXPORT_MYSQL_USER: ${{ env.TESTUSER }}
          IMPORT_EXPORT_MYSQL_PASSWORD: ${{ env.PASSWD }}
          MYSQL_USER: ${{ env.TESTUSER }}
          MYSQL_PASSWORD: ${{ env.IMPORT_EXPORT_MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: import_export
        ports:
            - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      postgres:
        image: postgres
        env:
          IMPORT_EXPORT_TEST_TYPE: postgres
          IMPORT_EXPORT_POSTGRESQL_USER: postgres
          IMPORT_EXPORT_POSTGRESQL_PASSWORD: ${{ env.PASSWD }}
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: import_export
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Check out repository code
      uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Run isort checks
      uses: jamescurtin/isort-action@master
      with:
        sortPaths: "import_export tests"
        configuration: "--check-only"
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/test.txt
    - if: matrix.django-version != 'main'
      name: Upgrade Django version (release)
      run: |
        python -m pip install "Django~=${{ matrix.django-version }}.0"
    - if: matrix.django-version == 'main'
      name: Upgrade Django version (main)
      run: |
        python -m pip install "https://github.com/django/django/archive/main.tar.gz"
    - name: List versions
      run: |
        echo "Python ${{ matrix.python-version }} -> Django ${{ matrix.django-version }}"
        python --version
        echo "Django `django-admin --version`"
    - name: Run Tests
      env:
        DB: ${{ matrix.db }}
        DB_HOST: 127.0.0.1
        DB_PORT: ${{ matrix.db_port }}
        DB_PASSWORD: ${{ env.PASSWD }}
      run: >-
        PYTHONPATH=".:tests:$PYTHONPATH" python
        -W error::DeprecationWarning -W error::PendingDeprecationWarning
        -m coverage run --omit='setup.py,./tests/*,./import_export/locale/*'
        --source=. tests/manage.py test core --settings=
    - name: Upload coverage data to coveralls.io
      run: coveralls --service=github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_FLAG_NAME: ${{ matrix.db }}-${{ matrix.django-version }}-${{ matrix.python-version }}
        COVERALLS_PARALLEL: true

  coveralls:
    name: Indicate completion to coveralls.io
    needs: test
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
      - name: Finished
        run: |
          pip3 install --upgrade coveralls
          coveralls --service=github --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
